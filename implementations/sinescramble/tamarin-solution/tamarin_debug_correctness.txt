maude tool: 'maude'
 checking version: WARNING:

 'maude --version' returned unsupported version '3.2'
 Please install one of the following versions of Maude: 2.7.1, 3.0, 3.1, 3.2.1, 3.2.2, 3.3, 3.3.1, 3.4, 3.5

Detailed results from testing 'maude'
 command: maude --version
 stdin:   
 stdout:  3.2

 stderr:  
 checking installation: OK.
[Theory SineScramble] Theory loaded
[Theory SineScramble] Theory translated
[Theory SineScramble] Derivation checks started
[Theory SineScramble] Derivation checks ended
[Theory SineScramble] Theory closed
theory SineScramble begin

// Function signature and definition of the equational theory E

functions: decrypt/2, encrypt/2, fst/1, h/1, pair/2, score/3, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2







rule (modulo E) Encrypt:
   [ Plaintext( ~p ), Key( ~k ) ]
  --[ Encrypt( ~p, ~k ) ]->
   [ Ciphertext( encrypt(~p, ~k) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Decrypt:
   [ Ciphertext( ~c ), Key( ~k ) ]
  --[ Decrypt( ~c, ~k ) ]->
   [ Plaintext( decrypt(~c, ~k) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) GenerateScore:
   [ KeyComponent( ~key_comp ), Index( ~index ), Parameters( ~params ) ]
  --[ GenerateScore( ~key_comp, ~index, ~params ) ]->
   [ Score( score(~key_comp, ~index, ~params) ) ]

  /* has exactly the trivial AC variant */

lemma confidentiality:
  all-traces "∀ p k #i. (Encrypt( p, k ) @ #i) ⇒ (¬(∃ #j. K( p ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ p k #i. (Encrypt( p, k ) @ #i) ∧ ∃ #j. (K( p ) @ #j)"
*/
by sorry

lemma integrity:
  all-traces
  "∀ p c k #i #j.
    (((Encrypt( p, k ) @ #i) ∧ (Decrypt( c, k ) @ #j)) ∧
     (c = encrypt(p, k))) ⇒
    (#i < #j)"
/*
guarded formula characterizing all counter-examples:
"∃ p c k #i #j.
  (Encrypt( p, k ) @ #i) ∧ (Decrypt( c, k ) @ #j) ∧ (c = encrypt(p, k))
 ∧
  ¬(#i < #j)"
*/
by sorry

lemma correctness:
  all-traces
  "∀ p c k #i #j.
    (((Encrypt( p, k ) @ #i) ∧ (Decrypt( c, k ) @ #j)) ∧
     (c = encrypt(p, k))) ⇒
    (p = decrypt(c, k))"
/*
guarded formula characterizing all counter-examples:
"∃ p c k #i #j.
  (Encrypt( p, k ) @ #i) ∧ (Decrypt( c, k ) @ #j) ∧ (c = encrypt(p, k))
 ∧
  ¬(p = decrypt(c, k))"
*/
by simplify















/*
WARNING: the following wellformedness checks failed!

Facts occur in the left-hand-side but not in any right-hand-side 
=================================================================

  1. in rule "Encrypt":  factName `Key' arity: 1 multiplicity: Linear
  
  2. in rule "Decrypt":  factName `Key' arity: 1 multiplicity: Linear
  
  3. in rule "GenerateScore":  factName `KeyComponent' arity: 1 multiplicity: Linear
  
  4. in rule "GenerateScore":  factName `Index' arity: 1 multiplicity: Linear
  
  5. in rule "GenerateScore":  factName `Parameters' arity: 1 multiplicity: Linear
*/

/*
Generated from:
Tamarin version 1.11.0
Maude version 3.2 (unsupported)
Git revision: e98d3ca2496c92e035f2d6391ca932aa4d74758a, branch: develop
Compiled at: 2025-07-30 03:37:35.917028682 UTC
*/

end

==============================================================================
summary of summaries:

analyzed: sinescramble_tamarin.spthy

  processing time: 0.11s
  
  WARNING: 1 wellformedness check failed!
           The analysis results might be wrong!
  
  confidentiality (all-traces): analysis incomplete (1 steps)
  integrity (all-traces): analysis incomplete (1 steps)
  correctness (all-traces): verified (1 steps)

==============================================================================
